package traducoresfinal;

/* Generated By:JavaCC: Do not edit this line. FinalLanguageConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface FinalLanguageConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PRINT = 1;
  /** RegularExpression Id. */
  int ENTER = 2;
  /** RegularExpression Id. */
  int IN = 3;
  /** RegularExpression Id. */
  int RANGE = 4;
  /** RegularExpression Id. */
  int PYC = 5;
  /** RegularExpression Id. */
  int P1 = 6;
  /** RegularExpression Id. */
  int P2 = 7;
  /** RegularExpression Id. */
  int L1 = 8;
  /** RegularExpression Id. */
  int L2 = 9;
  /** RegularExpression Id. */
  int C1 = 10;
  /** RegularExpression Id. */
  int C2 = 11;
  /** RegularExpression Id. */
  int VARINT = 12;
  /** RegularExpression Id. */
  int VARSTRING = 13;
  /** RegularExpression Id. */
  int VARFLOAT = 14;
  /** RegularExpression Id. */
  int FLOAT = 15;
  /** RegularExpression Id. */
  int INTEGER = 16;
  /** RegularExpression Id. */
  int DIGITO = 17;
  /** RegularExpression Id. */
  int MAS = 18;
  /** RegularExpression Id. */
  int MENOS = 19;
  /** RegularExpression Id. */
  int MULTI = 20;
  /** RegularExpression Id. */
  int MODULE = 21;
  /** RegularExpression Id. */
  int DIV = 22;
  /** RegularExpression Id. */
  int POWER = 23;
  /** RegularExpression Id. */
  int ASIG = 24;
  /** RegularExpression Id. */
  int SQR = 25;
  /** RegularExpression Id. */
  int INEQUAL = 26;
  /** RegularExpression Id. */
  int EQUAL = 27;
  /** RegularExpression Id. */
  int LESSTHAN = 28;
  /** RegularExpression Id. */
  int MORETHAN = 29;
  /** RegularExpression Id. */
  int LESSOREQUAL = 30;
  /** RegularExpression Id. */
  int MOREOREQUAL = 31;
  /** RegularExpression Id. */
  int OR = 32;
  /** RegularExpression Id. */
  int AND = 33;
  /** RegularExpression Id. */
  int NOT = 34;
  /** RegularExpression Id. */
  int IF = 35;
  /** RegularExpression Id. */
  int ELIF = 36;
  /** RegularExpression Id. */
  int ELSE = 37;
  /** RegularExpression Id. */
  int WLOOP = 38;
  /** RegularExpression Id. */
  int FLOOP = 39;
  /** RegularExpression Id. */
  int CADENA = 40;
  /** RegularExpression Id. */
  int VAR = 41;
  /** RegularExpression Id. */
  int LETRA = 42;
  /** RegularExpression Id. */
  int COMM1 = 43;
  /** RegularExpression Id. */
  int COMM2 = 44;
  /** RegularExpression Id. */
  int FIN_COMM2 = 46;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int DENTRO_DEL_COMENTARIO = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"print\"",
    "\"enter\"",
    "\"in\"",
    "\"range\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"int\"",
    "\"String\"",
    "\"float\"",
    "<FLOAT>",
    "<INTEGER>",
    "<DIGITO>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"%\"",
    "\"/\"",
    "\"**\"",
    "\"=\"",
    "\"%%\"",
    "\"!=\"",
    "\"==\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"|\"",
    "\"&&\"",
    "\"!\"",
    "\"if\"",
    "\"elif\"",
    "\"else\"",
    "\"while\"",
    "\"for\"",
    "<CADENA>",
    "<VAR>",
    "<LETRA>",
    "<COMM1>",
    "\"\\\'\\\'\\\'\"",
    "<token of kind 45>",
    "\"\\\'\\\'\\\'\"",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
  };

}
