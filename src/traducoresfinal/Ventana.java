package traducoresfinal;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.FileDialog;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import syntaxtree.Node;
import javax.swing.tree.*;
import syntaxtree.*;
import visitor.*;

/**
 *
 * @author admin
 */
public class Ventana extends javax.swing.JFrame {
    
    public String fileName = null;
    public String fileAddress = new String();

    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        btnLexico = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtCodigo = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMensajes = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        ListTokens = new javax.swing.JList<>();
        jMenu = new javax.swing.JMenuBar();
        jFileItem = new javax.swing.JMenu();
        iCreateFile = new javax.swing.JMenuItem();
        iOpenFile = new javax.swing.JMenuItem();
        iSaveFile = new javax.swing.JMenuItem();
        iSaveAs = new javax.swing.JMenuItem();
        iExit = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Analizador"); // NOI18N

        btnLexico.setText("Analisis Lexico y Sint√°ctico");
        btnLexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLexicoActionPerformed(evt);
            }
        });

        txtCodigo.setColumns(20);
        txtCodigo.setRows(5);
        jScrollPane1.setViewportView(txtCodigo);

        txtMensajes.setEditable(false);
        txtMensajes.setColumns(20);
        txtMensajes.setRows(5);
        jScrollPane2.setViewportView(txtMensajes);

        ListTokens.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(ListTokens);

        jFileItem.setText("File");

        iCreateFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        iCreateFile.setText("Create New File");
        iCreateFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iCreateFileActionPerformed(evt);
            }
        });
        jFileItem.add(iCreateFile);

        iOpenFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        iOpenFile.setText("Open File");
        iOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iOpenFileActionPerformed(evt);
            }
        });
        jFileItem.add(iOpenFile);

        iSaveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        iSaveFile.setText("Save");
        iSaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iSaveFileActionPerformed(evt);
            }
        });
        jFileItem.add(iSaveFile);

        iSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        iSaveAs.setText("Save As");
        iSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iSaveAsActionPerformed(evt);
            }
        });
        jFileItem.add(iSaveAs);

        iExit.setText("Exit");
        iExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iExitActionPerformed(evt);
            }
        });
        jFileItem.add(iExit);

        jMenu.add(jFileItem);

        setJMenuBar(jMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLexico)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(btnLexico)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(523, 425));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnLexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLexicoActionPerformed
        // TODO add your handling code here:
        txtMensajes.setText("");
        ArrayList<Token> lista= new ArrayList<>();
        ArrayList<Simbolo> tabla = new ArrayList<>();
        try{
            //el contenido de la lista
            DefaultListModel<String> modelo= new DefaultListModel<>();
            ListTokens.setModel(modelo);
            InputStream targetStream = new  ByteArrayInputStream(txtCodigo.getText().getBytes());
            FinalLanguage leng = new FinalLanguage(lista,tabla, targetStream);
            Node raiz;
            Visitor1 imprimir = new Visitor1();
            raiz = leng.SentenciaMuchas();
            DefaultTreeModel modelo2 = new DefaultTreeModel(new DefaultMutableTreeNode(raiz));
            //mandar la lista al modelo para que aparezca en el List, aparecer en pantalla
            for (Token token : lista) {
                modelo.addElement(token.toString());               
            }
            raiz.accept(imprimir);
            
            DefaultTableModel model3 = new DefaultTableModel();
            model3.addColumn("Nombre");
            model3.addColumn("Tipo");
            
            System.out.println("---Tabla de Simbolos--");
            for (Simbolo simbolo: tabla) {
                System.out.println(simbolo);
                model3.insertRow(model3.getRowCount(), new Object [] {
                    simbolo.nombre,
                    simbolo.tipo
                });
               
            }
            System.out.println("------------");
            modelo2 = imprimir.getModelo();
            Arbol tree = new Arbol();
            tree.jArbolSintactico.setModel(modelo2);
            tree.setVisible(true);
            TablaSimbolos tablaData = new TablaSimbolos();
            
            
            tablaData.jTablaSimbolos.setModel(model3);
            
            tablaData.setVisible(true);
        } catch (TokenMgrError e){
            String str = e.getMessage();      
            str = str.replaceAll("[^0-9]+", " ");
            int index;
            index = Integer.parseInt(((Arrays.asList(str.trim().split(" "))).get(0)));
            txtMensajes.setText ("Error lexico: "+ e.getMessage()); 
           txtCodigo.setCaretPosition(txtCodigo.getDocument().getDefaultRootElement().getElement(index-1).getStartOffset());
            txtCodigo.requestFocus();
            
        }
        catch (ParseException e){
            String str = e.getMessage();      
            str = str.replaceAll("[^0-9]+", " ");
            int index  = Integer.parseInt(((Arrays.asList(str.trim().split(" "))).get(0)));
            txtMensajes.setText ("Error sintactico: "+ e.getMessage()); 
           txtCodigo.setCaretPosition(txtCodigo.getDocument().getDefaultRootElement().getElement(index-1).getStartOffset());
            txtCodigo.requestFocus();
        }
        catch (SemanticException e) {
            String str = e.getMessage();      
            str = str.replaceAll("[^0-9]+", " ");
            int index  = Integer.parseInt(((Arrays.asList(str.trim().split(" "))).get(0)));
            txtMensajes.setText (e.getMessage());
            txtCodigo.setCaretPosition(txtCodigo.getDocument().getDefaultRootElement().getElement(index-1).getStartOffset());
            txtCodigo.requestFocus();
        }
    }//GEN-LAST:event_btnLexicoActionPerformed

    private void iCreateFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iCreateFileActionPerformed
        // TODO add your handling code here:
        boolean check = true ;
        if (fileName == null && !"".equals(txtCodigo.getText())) {
            int result = JOptionPane.showConfirmDialog(
                    (Component) null, 
                    "Do you want to save this file?",
                    "Warning", JOptionPane.YES_NO_CANCEL_OPTION);
            switch(result) {
                case 0:
                    saveAs();
                    break;
                case 1:
                    break;
                case 2:
                    check = false;
                    break;
            }  
        }
        else if (fileName!=null) {
            int result = JOptionPane.showConfirmDialog(
                    (Component) null, 
                    "Do you want to changes in this file?",
                    "Warning", JOptionPane.YES_NO_CANCEL_OPTION);
            switch(result) {
                case 0:
                    save();
                    break;
                case 1:
                    break;
                case 2:
                    check = false;
                    break;
            }  
        }
        if (check) {
            txtCodigo.setText("");
            this.setTitle("New");
            fileName = null;
        }
    }//GEN-LAST:event_iCreateFileActionPerformed

    private void iOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iOpenFileActionPerformed
        // TODO add your handling code here:
        FileDialog fd = new FileDialog(this, "Open", FileDialog.LOAD);
        fd.setFile("*.fl");
        fd.setVisible(true);
        
        if(fd.getFile()!=null) {
            fileName = fd.getFile();
            fileAddress= fd.getDirectory() + fileName;
             this.setTitle(fileName);   
        }
        
        try {
            try (BufferedReader br = new BufferedReader(new FileReader(fileAddress))) {
                this.txtCodigo.setText("");
                String line = null;
                while((line = br.readLine()) != null) {
                    this.txtCodigo.append(line + "\n");   
                }
            }  
        } catch(IOException e) {
            System.out.println("FILE NOT OPENED!");
        }
    }//GEN-LAST:event_iOpenFileActionPerformed

    private void save() {
        if (fileName == null) {
            saveAs();
        }
        else {
            
            try {
                FileWriter fw = new FileWriter(fileAddress);
                fw.append(this.txtCodigo.getText());
                this.setTitle(fileName);
                fw.close();
            } catch (IOException ex) {
                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
            }
                
        }
    }
    private void saveAs() {
        FileDialog fd = new FileDialog(this, "Save", FileDialog.SAVE);
        fd.setFile("*.fl");
        fd.setVisible(true);
        
        if (fd.getFile()!=null) {
            fileName = fd.getFile();
            fileAddress = fd.getDirectory() + fileName;
            this.setTitle(fileName);
            try {
                FileWriter fw = new FileWriter(fileAddress);
                fw.append(this.txtCodigo.getText());
                fw.close();
            }
            catch(IOException e) {
                System.out.println("Something wrong");
            }
        }
    }
    private void iSaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iSaveFileActionPerformed
        // TODO add your handling code here:
        save();
    }//GEN-LAST:event_iSaveFileActionPerformed
    
    private void iSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iSaveAsActionPerformed
        // TODO add your handling code here:
        saveAs();
    }//GEN-LAST:event_iSaveAsActionPerformed

    private void iExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_iExitActionPerformed

    /**
     * @param args the command line arguments
     */    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> ListTokens;
    private javax.swing.JButton btnLexico;
    private javax.swing.JMenuItem iCreateFile;
    private javax.swing.JMenuItem iExit;
    private javax.swing.JMenuItem iOpenFile;
    private javax.swing.JMenuItem iSaveAs;
    private javax.swing.JMenuItem iSaveFile;
    private javax.swing.JMenu jFileItem;
    private javax.swing.JMenuBar jMenu;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txtCodigo;
    private javax.swing.JTextArea txtMensajes;
    // End of variables declaration//GEN-END:variables


}
