package traducoresfinal;

/* FinalLanguage.java */
/* Generated By:JavaCC: Do not edit this line. FinalLanguage.java */
import syntaxtree.*;
import java.util.Vector;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;


public class FinalLanguage implements FinalLanguageConstants {

  ArrayList <Token> lista = new ArrayList();
  ArrayList<Simbolo> tabla  = new ArrayList();
  Simbolo sim;
  

  final public SentenciaMuchas SentenciaMuchas() throws ParseException, SemanticException {NodeListOptional n0 = new NodeListOptional();
   Sentencia n1;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINT:
      case ENTER:
      case VARINT:
      case VARSTRING:
      case VARFLOAT:
      case IF:
      case WLOOP:
      case FLOOP:
      case VAR:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n1 = Sentencia();
n0.addNode(n1);
    }
n0.nodes.trimToSize();
{if ("" != null) return new SentenciaMuchas(n0);}
    throw new Error("Missing return statement in function");
}

  final public Sentencia Sentencia() throws ParseException, SemanticException {NodeChoice n0;
   NodeSequence n1;
   Declaracion n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   Sent_read n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   Sent_write n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   Asignacion n14;
   NodeToken n15;
   Token n16;
   While n17;
   For n18;
   SentenciaIf n19;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VARINT:
    case VARSTRING:
    case VARFLOAT:{
n1 = new NodeSequence(2);
      n2 = Declaracion();
n1.addNode(n2);
      n4 = jj_consume_token(PYC);
n3 = JTBToolkit.makeNodeToken(n4);
n1.addNode(n3);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case ENTER:{
n5 = new NodeSequence(2);
      n6 = Sent_read();
n5.addNode(n6);
      n8 = jj_consume_token(PYC);
n7 = JTBToolkit.makeNodeToken(n8);
n5.addNode(n7);
n0 = new NodeChoice(n5, 1);
      break;
      }
    case PRINT:{
n9 = new NodeSequence(2);
      n10 = Sent_write();
n9.addNode(n10);
      n12 = jj_consume_token(PYC);
n11 = JTBToolkit.makeNodeToken(n12);
n9.addNode(n11);
n0 = new NodeChoice(n9, 2);
      break;
      }
    case VAR:{
n13 = new NodeSequence(2);
      n14 = Asignacion();
n13.addNode(n14);
      n16 = jj_consume_token(PYC);
n15 = JTBToolkit.makeNodeToken(n16);
n13.addNode(n15);
n0 = new NodeChoice(n13, 3);
      break;
      }
    case WLOOP:{
      n17 = While();
n0 = new NodeChoice(n17, 4);
      break;
      }
    case FLOOP:{
      n18 = For();
n0 = new NodeChoice(n18, 5);
      break;
      }
    case IF:{
      n19 = SentenciaIf();
n0 = new NodeChoice(n19, 6);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Sentencia(n0);}
    throw new Error("Missing return statement in function");
}

  final public While While() throws ParseException, SemanticException {NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Comparison n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   SentenciaMuchas n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(WLOOP);
n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(P1);
n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Comparison();
    n6 = jj_consume_token(P2);
n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(L1);
n7 = JTBToolkit.makeNodeToken(n8);
    n9 = SentenciaMuchas();
    n11 = jj_consume_token(L2);
n10 = JTBToolkit.makeNodeToken(n11);
{if ("" != null) return new While(n0,n2,n4,n5,n7,n9,n10);}
    throw new Error("Missing return statement in function");
}

  final public For For() throws ParseException, SemanticException {NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeChoice n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   SentenciaMuchas n23;
   NodeToken n24;
   Token n25;
    n1 = jj_consume_token(FLOOP);
n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(P1);
n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(VAR);
    Simbolo t = new Simbolo();
    t.nombre = token.toString();
    if (!tabla.contains(t)) {
        throw new SemanticException(" For, variable iterable " + t.nombre+ " no declarada, Linea " + token.beginLine);
    }
n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(P2);
n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(IN);
n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(RANGE);
n10 = JTBToolkit.makeNodeToken(n11);
    n13 = jj_consume_token(P1);
n12 = JTBToolkit.makeNodeToken(n13);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      n16 = jj_consume_token(INTEGER);
n15 = JTBToolkit.makeNodeToken(n16);
n14 = new NodeChoice(n15, 0);
      break;
      }
    case VAR:{
      n18 = jj_consume_token(VAR);
      Simbolo t2 = new Simbolo();
    t2.nombre = token.toString();
    if (!tabla.contains(t2)) {
        throw new SemanticException(" For, variable " + t2.nombre+ " no declarada, Linea " + token.beginLine);
    }
n17 = JTBToolkit.makeNodeToken(n18);
n14 = new NodeChoice(n17, 1);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n20 = jj_consume_token(P2);
n19 = JTBToolkit.makeNodeToken(n20);
    n22 = jj_consume_token(L1);
n21 = JTBToolkit.makeNodeToken(n22);
    n23 = SentenciaMuchas();
    n25 = jj_consume_token(L2);
n24 = JTBToolkit.makeNodeToken(n25);
{if ("" != null) return new For(n0,n2,n4,n6,n8,n10,n12,n14,n19,n21,n23,n24);}
    throw new Error("Missing return statement in function");
}

  final public SentenciaIf SentenciaIf() throws ParseException, SemanticException {NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Comparison n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeList n9 = new NodeList();
   Sentencia n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   SentenciaMuchas n19;
   NodeToken n20;
   Token n21;
    n1 = jj_consume_token(IF);
n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(P1);
n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Comparison();
    n6 = jj_consume_token(P2);
n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(L1);
n7 = JTBToolkit.makeNodeToken(n8);
    label_2:
    while (true) {
      n10 = Sentencia();
n9.addNode(n10);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINT:
      case ENTER:
      case VARINT:
      case VARSTRING:
      case VARFLOAT:
      case IF:
      case WLOOP:
      case FLOOP:
      case VAR:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
    }
n9.nodes.trimToSize();
    n12 = jj_consume_token(L2);
n11 = JTBToolkit.makeNodeToken(n12);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
n14 = new NodeSequence(4);
      n16 = jj_consume_token(ELSE);
n15 = JTBToolkit.makeNodeToken(n16);
n14.addNode(n15);
      n18 = jj_consume_token(L1);
n17 = JTBToolkit.makeNodeToken(n18);
n14.addNode(n17);
      n19 = SentenciaMuchas();
n14.addNode(n19);
      n21 = jj_consume_token(L2);
n20 = JTBToolkit.makeNodeToken(n21);
n14.addNode(n20);
n13.addNode(n14);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
{if ("" != null) return new SentenciaIf(n0,n2,n4,n5,n7,n9,n11,n13);}
    throw new Error("Missing return statement in function");
}

  final public Comparison Comparison() throws ParseException, SemanticException {NodeOptional n0 = new NodeOptional();
   Op_Not n1;
   Exp n2;
   NodeOptional n3 = new NodeOptional();
   NodeList n4;
   NodeSequence n5;
   NodeChoice n6;
   Op_Not n7;
   Op_OrAnd n8;
   Exp n9;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      n1 = Op_Not();
n0.addNode(n1);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    n2 = Exp();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OR:
    case AND:
    case NOT:{
n4 = new NodeList();
      label_3:
      while (true) {
n5 = new NodeSequence(2);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          n7 = Op_Not();
n6 = new NodeChoice(n7, 0);
          break;
          }
        case OR:
        case AND:{
          n8 = Op_OrAnd();
n6 = new NodeChoice(n8, 1);
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
n5.addNode(n6);
        n9 = Exp();
n5.addNode(n9);
n4.addNode(n5);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OR:
        case AND:
        case NOT:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
      }
n4.nodes.trimToSize();
n3.addNode(n4);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
{if ("" != null) return new Comparison(n0,n2,n3);}
    throw new Error("Missing return statement in function");
}

  final public Op_Not Op_Not() throws ParseException, SemanticException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NOT);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new Op_Not(n0);}
    throw new Error("Missing return statement in function");
}

  final public Op_OrAnd Op_OrAnd() throws ParseException {NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OR:{
      n2 = jj_consume_token(OR);
n1 = JTBToolkit.makeNodeToken(n2);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case AND:{
      n4 = jj_consume_token(AND);
n3 = JTBToolkit.makeNodeToken(n4);
n0 = new NodeChoice(n3, 1);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Op_OrAnd(n0);}
    throw new Error("Missing return statement in function");
}

  final public Declaracion Declaracion() throws ParseException, SemanticException {Tipo n0;
   NodeToken n1;
   Token n2;
    n0 = Tipo();
    n2 = jj_consume_token(VAR);
    if (lista!=null) {
        sim.nombre = token.toString();
        if (tabla.contains(sim)) {
            throw new ParseException("Error semantico, variable " + sim.nombre + " ya declarada, Linea " + token.beginLine);
        }
        else {
            tabla.add(sim);
        }
        
    }
n1 = JTBToolkit.makeNodeToken(n2);
{if ("" != null) return new Declaracion(n0,n1);}
    throw new Error("Missing return statement in function");
}

  final public Tipo Tipo() throws ParseException, SemanticException {NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VARINT:{
      n2 = jj_consume_token(VARINT);
      if (lista!=null){
          sim = new Simbolo();
          sim.tipo = token.toString();
      }
n1 = JTBToolkit.makeNodeToken(n2);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case VARSTRING:{
      n4 = jj_consume_token(VARSTRING);
      if (lista!=null){
          sim = new Simbolo();
          sim.tipo = token.toString();
      }
n3 = JTBToolkit.makeNodeToken(n4);
n0 = new NodeChoice(n3, 1);
      break;
      }
    case VARFLOAT:{
      n6 = jj_consume_token(VARFLOAT);
      if (lista!=null){
          sim = new Simbolo();
          sim.tipo = token.toString();
      }
n5 = JTBToolkit.makeNodeToken(n6);
n0 = new NodeChoice(n5, 2);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Tipo(n0);}
    throw new Error("Missing return statement in function");
}

  final public Sent_read Sent_read() throws ParseException, SemanticException {NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(ENTER);
n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(P1);
n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(VAR);
    Simbolo t = new Simbolo();
    t.nombre = token.toString();
    if (!tabla.contains(t)) {
        throw new SemanticException(" Enter, variable " + t.nombre+ " no declarada, Linea " + token.beginLine);
    }
n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(P2);
n6 = JTBToolkit.makeNodeToken(n7);
{if ("" != null) return new Sent_read(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
}

  final public Sent_write Sent_write() throws ParseException, SemanticException {NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   Exp n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(PRINT);
n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(P1);
n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case P1:
    case FLOAT:
    case INTEGER:
    case VAR:{
      n5 = Exp();
n4 = new NodeChoice(n5, 0);
      break;
      }
    case CADENA:{
      n7 = jj_consume_token(CADENA);
n6 = JTBToolkit.makeNodeToken(n7);
n4 = new NodeChoice(n6, 1);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n9 = jj_consume_token(P2);
n8 = JTBToolkit.makeNodeToken(n9);
{if ("" != null) return new Sent_write(n0,n2,n4,n8);}
    throw new Error("Missing return statement in function");
}

  final public Asignacion Asignacion() throws ParseException, SemanticException {NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   Exp n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(VAR);
    Simbolo t = new Simbolo();
    t.nombre = token.toString();
    if (!tabla.contains(t)) {
        throw new SemanticException(" Asignacion, variable " + t.nombre+ " no declarada, Linea " + token.beginLine);
    }
    
n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ASIG);
n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case P1:
    case FLOAT:
    case INTEGER:
    case VAR:{
      n5 = Exp();
n4 = new NodeChoice(n5, 0);
      break;
      }
    case CADENA:{
      n7 = jj_consume_token(CADENA);
n6 = JTBToolkit.makeNodeToken(n7);
n4 = new NodeChoice(n6, 1);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Asignacion(n0,n2,n4);}
    throw new Error("Missing return statement in function");
}

  final public Exp Exp() throws ParseException, SemanticException {Exp_simple n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   Op_comp n3;
   Exp_simple n4;
    n0 = Exp_simple();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INEQUAL:
    case EQUAL:
    case LESSTHAN:
    case MORETHAN:
    case LESSOREQUAL:
    case MOREOREQUAL:{
n2 = new NodeSequence(2);
      n3 = Op_comp();
n2.addNode(n3);
      n4 = Exp_simple();
n2.addNode(n4);
n1.addNode(n2);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
{if ("" != null) return new Exp(n0,n1);}
    throw new Error("Missing return statement in function");
}

  final public Op_comp Op_comp() throws ParseException , SemanticException{NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
      n2 = jj_consume_token(EQUAL);
n1 = JTBToolkit.makeNodeToken(n2);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case LESSTHAN:{
      n4 = jj_consume_token(LESSTHAN);
n3 = JTBToolkit.makeNodeToken(n4);
n0 = new NodeChoice(n3, 1);
      break;
      }
    case MORETHAN:{
      n6 = jj_consume_token(MORETHAN);
n5 = JTBToolkit.makeNodeToken(n6);
n0 = new NodeChoice(n5, 2);
      break;
      }
    case LESSOREQUAL:{
      n8 = jj_consume_token(LESSOREQUAL);
n7 = JTBToolkit.makeNodeToken(n8);
n0 = new NodeChoice(n7, 3);
      break;
      }
    case MOREOREQUAL:{
      n10 = jj_consume_token(MOREOREQUAL);
n9 = JTBToolkit.makeNodeToken(n10);
n0 = new NodeChoice(n9, 4);
      break;
      }
    case INEQUAL:{
      n12 = jj_consume_token(INEQUAL);
n11 = JTBToolkit.makeNodeToken(n12);
n0 = new NodeChoice(n11, 5);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Op_comp(n0);}
    throw new Error("Missing return statement in function");
}

  final public Exp_simple Exp_simple() throws ParseException, SemanticException {Term n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   Op_suma n4;
   Op_resta n5;
   Term n6;
    n0 = Term();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAS:
      case MENOS:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAS:{
        n4 = Op_suma();
n3 = new NodeChoice(n4, 0);
        break;
        }
      case MENOS:{
        n5 = Op_resta();
n3 = new NodeChoice(n5, 1);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n2.addNode(n3);
      n6 = Term();
n2.addNode(n6);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
{if ("" != null) return new Exp_simple(n0,n1);}
    throw new Error("Missing return statement in function");
}

  final public Op_suma Op_suma() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(MAS);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new Op_suma(n0);}
    throw new Error("Missing return statement in function");
}

  final public Op_resta Op_resta() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(MENOS);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new Op_resta(n0);}
    throw new Error("Missing return statement in function");
}

  final public Term Term() throws ParseException, SemanticException {Factor n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   Op_mult n3;
   Factor n4;
    n0 = Factor();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTI:
      case MODULE:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
n2 = new NodeSequence(2);
      n3 = Op_mult();
n2.addNode(n3);
      n4 = Factor();
n2.addNode(n4);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
{if ("" != null) return new Term(n0,n1);}
    throw new Error("Missing return statement in function");
}

  final public Op_mult Op_mult() throws ParseException {NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MULTI:{
      n2 = jj_consume_token(MULTI);
n1 = JTBToolkit.makeNodeToken(n2);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case DIV:{
      n4 = jj_consume_token(DIV);
n3 = JTBToolkit.makeNodeToken(n4);
n0 = new NodeChoice(n3, 1);
      break;
      }
    case MODULE:{
      n6 = jj_consume_token(MODULE);
n5 = JTBToolkit.makeNodeToken(n6);
n0 = new NodeChoice(n5, 2);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Op_mult(n0);}
    throw new Error("Missing return statement in function");
}

  final public Factor Factor() throws ParseException, SemanticException {Factor2 n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   Op_mod n3;
   Factor2 n4;
    n0 = Factor2();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case POWER:
      case SQR:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
n2 = new NodeSequence(2);
      n3 = Op_mod();
n2.addNode(n3);
      n4 = Factor2();
n2.addNode(n4);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
{if ("" != null) return new Factor(n0,n1);}
    throw new Error("Missing return statement in function");
}

  final public Op_mod Op_mod() throws ParseException {NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case POWER:{
      n2 = jj_consume_token(POWER);
n1 = JTBToolkit.makeNodeToken(n2);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case SQR:{
      n4 = jj_consume_token(SQR);
n3 = JTBToolkit.makeNodeToken(n4);
n0 = new NodeChoice(n3, 1);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Op_mod(n0);}
    throw new Error("Missing return statement in function");
}

  final public Factor2 Factor2() throws ParseException , SemanticException{NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case P1:{
n1 = new NodeSequence(3);
      n3 = jj_consume_token(P1);
n2 = JTBToolkit.makeNodeToken(n3);
n1.addNode(n2);
      n4 = Exp();
n1.addNode(n4);
      n6 = jj_consume_token(P2);
n5 = JTBToolkit.makeNodeToken(n6);
n1.addNode(n5);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case INTEGER:{
      n8 = jj_consume_token(INTEGER);
n7 = JTBToolkit.makeNodeToken(n8);
n0 = new NodeChoice(n7, 1);
      break;
      }
    case FLOAT:{
      n10 = jj_consume_token(FLOAT);
n9 = JTBToolkit.makeNodeToken(n10);
n0 = new NodeChoice(n9, 2);
      break;
      }
    case VAR:{
      n12 = jj_consume_token(VAR);
      Simbolo t = new Simbolo();
    t.nombre = token.toString();
    if (!tabla.contains(t)) {
        throw new SemanticException(" Factor, variable " + t.nombre+ " no declarada, Linea " + token.beginLine);
    }
n11 = JTBToolkit.makeNodeToken(n12);
n0 = new NodeChoice(n11, 3);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Factor2(n0);}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public FinalLanguageTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x7006,0x7006,0x10000,0x7006,0x0,0x0,0x0,0x0,0x0,0x0,0x7000,0x18040,0x18040,0xfc000000,0xfc000000,0xc0000,0xc0000,0x700000,0x700000,0x2800000,0x2800000,0x18040,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x2c8,0x2c8,0x200,0x2c8,0x20,0x4,0x7,0x7,0x7,0x3,0x0,0x300,0x300,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,};
	}

  /** Constructor with InputStream. */
  public FinalLanguage(java.io.InputStream stream) {
	  this(stream, null);
    lista = null;
    tabla = null;
  }

  public FinalLanguage(ArrayList<Token> lista, ArrayList<Simbolo> tabla, java.io.InputStream stream) {
	  this(stream, null);
    this.lista = lista;
  this.tabla = tabla;}
  /** Constructor with InputStream and supplied encoding */

    /**
     * Constructor with InputStream and supplied encoding
     * @param stream
     */

    /**
     * Constructor with InputStream and supplied encoding
     * @param stream
     * @param encoding
     */
    public FinalLanguage(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new FinalLanguageTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public FinalLanguage(java.io.Reader stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new FinalLanguageTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new FinalLanguageTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public FinalLanguage(FinalLanguageTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FinalLanguageTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
   if (lista!=null){
    lista.add(token);
   }
   System.out.println("Token: " + token.toString());
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[51];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 22; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 51; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
