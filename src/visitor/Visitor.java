//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * All void visitors must implement this interface.
 */

public interface Visitor {

   //
   // void Auto class visitors
   //

   public void visit(NodeList n);
   public void visit(NodeListOptional n);
   public void visit(NodeOptional n);
   public void visit(NodeSequence n);
   public void visit(NodeToken n);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( Sentencia() )*
    */
   public void visit(SentenciaMuchas n);

   /**
    * f0 -> Declaracion() ";"
    *       | Sent_read() ";"
    *       | Sent_write() ";"
    *       | Asignacion() ";"
    *       | While()
    *       | For()
    *       | SentenciaIf()
    */
   public void visit(Sentencia n);

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Comparison()
    * f3 -> ")"
    * f4 -> "{"
    * f5 -> SentenciaMuchas()
    * f6 -> "}"
    */
   public void visit(While n);

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> <VAR>
    * f3 -> ")"
    * f4 -> "in"
    * f5 -> "range"
    * f6 -> "("
    * f7 -> ( <INTEGER> | <VAR> )
    * f8 -> ")"
    * f9 -> "{"
    * f10 -> SentenciaMuchas()
    * f11 -> "}"
    */
   public void visit(For n);

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Comparison()
    * f3 -> ")"
    * f4 -> "{"
    * f5 -> ( Sentencia() )+
    * f6 -> "}"
    * f7 -> ( "else" "{" SentenciaMuchas() "}" )?
    */
   public void visit(SentenciaIf n);

   /**
    * f0 -> ( Op_Not() )?
    * f1 -> Exp()
    * f2 -> ( ( ( Op_Not() | Op_OrAnd() ) Exp() )+ )?
    */
   public void visit(Comparison n);

   /**
    * f0 -> "!"
    */
   public void visit(Op_Not n);

   /**
    * f0 -> "|"
    *       | "&&"
    */
   public void visit(Op_OrAnd n);

   /**
    * f0 -> Tipo()
    * f1 -> <VAR>
    */
   public void visit(Declaracion n);

   /**
    * f0 -> "int"
    *       | "String"
    *       | "float"
    */
   public void visit(Tipo n);

   /**
    * f0 -> "enter"
    * f1 -> "("
    * f2 -> <VAR>
    * f3 -> ")"
    */
   public void visit(Sent_read n);

   /**
    * f0 -> "print"
    * f1 -> "("
    * f2 -> ( Exp() | <CADENA> )
    * f3 -> ")"
    */
   public void visit(Sent_write n);

   /**
    * f0 -> <VAR>
    * f1 -> "="
    * f2 -> ( Exp() | <CADENA> )
    */
   public void visit(Asignacion n);

   /**
    * f0 -> Exp_simple()
    * f1 -> ( Op_comp() Exp_simple() )?
    */
   public void visit(Exp n);

   /**
    * f0 -> "=="
    *       | "<"
    *       | ">"
    *       | "<="
    *       | ">="
    *       | "!="
    */
   public void visit(Op_comp n);

   /**
    * f0 -> Term()
    * f1 -> ( ( Op_suma() | Op_resta() ) Term() )*
    */
   public void visit(Exp_simple n);

   /**
    * f0 -> "+"
    */
   public void visit(Op_suma n);

   /**
    * f0 -> "-"
    */
   public void visit(Op_resta n);

   /**
    * f0 -> Factor()
    * f1 -> ( Op_mult() Factor() )*
    */
   public void visit(Term n);

   /**
    * f0 -> "*"
    *       | "/"
    *       | "%"
    */
   public void visit(Op_mult n);

   /**
    * f0 -> Factor2()
    * f1 -> ( Op_mod() Factor2() )*
    */
   public void visit(Factor n);

   /**
    * f0 -> "**"
    *       | "%%"
    */
   public void visit(Op_mod n);

   /**
    * f0 -> "(" Exp() ")"
    *       | <INTEGER>
    *       | <FLOAT>
    *       | <VAR>
    */
   public void visit(Factor2 n);

}

