//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Visitor1 implements Visitor {
    private int espacios;
    private int count;
    private DefaultTreeModel modelo;
    private List<DefaultMutableTreeNode> primero = new ArrayList<DefaultMutableTreeNode>();
    public DefaultTreeModel getModelo() {
        return modelo;
    }
    
     public String sangria(){
        String x = "";
        for (int i=0; i < espacios ; i++) {
            x+= "   ";
        }
        return x;
    }
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeListOptional n) {
      if ( n.present() )
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
   }

   public void visit(NodeOptional n) {
      if ( n.present() )
         n.node.accept(this);
   }

   public void visit(NodeSequence n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

      public void visit(NodeToken n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(n.toString());
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
           
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( Sentencia() )*
    */
   public void visit(SentenciaMuchas n) {
       if (primero.size() == 0){
           primero.add(new DefaultMutableTreeNode("SentenciaMuchas"));
            modelo = new DefaultTreeModel(primero.get(primero.size() - 1));
       }
       else {
           DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("SentenciaMuchas");
           modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       }  
      System.out.println(sangria() + "SentenciaMuchas ->");
      espacios ++;
      n.f0.accept(this);
      espacios--;
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> Declaracion() ";"
    *       | Sent_read() ";"
    *       | Sent_write() ";"
    *       | Asignacion() ";"
    *       | While()
    *       | For()
    *       | SentenciaIf()
    */
   public void visit(Sentencia n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Sentencia");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria() + "Sentencia ->");
       espacios++;
      n.f0.accept(this);
      espacios--;
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Comparison()
    * f3 -> ")"
    * f4 -> "{"
    * f5 -> SentenciaMuchas()
    * f6 -> "}"
    */
   public void visit(While n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("While");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria() + "While ->");
      n.f0.accept(this);
      espacios++;
      n.f1.accept(this);
      espacios--;
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      espacios++;
      n.f5.accept(this);
      espacios--;
      n.f6.accept(this);
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> <VAR>
    * f3 -> ")"
    * f4 -> "in"
    * f5 -> "range"
    * f6 -> "("
    * f7 -> ( <INTEGER> | <VAR> )
    * f8 -> ")"
    * f9 -> "{"
    * f10 -> SentenciaMuchas()
    * f11 -> "}"
    */
   public void visit(For n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("For");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria() + "For ->");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      espacios++;
      n.f10.accept(this);
      espacios--;
      n.f11.accept(this);
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Comparison()
    * f3 -> ")"
    * f4 -> "{"
    * f5 -> ( Sentencia() )+
    * f6 -> "}"
    * f7 -> ( "else" "{" SentenciaMuchas() "}" )?
    */
   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Comparison()
    * f3 -> ")"
    * f4 -> "{"
    * f5 -> ( Sentencia() )+
    * f6 -> "}"
    * f7 -> ( "else" "{" SentenciaMuchas() "}" )?
    */
   public void visit(SentenciaIf n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("SentenciaIf");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria()+ "If ->");
      n.f0.accept(this);
      n.f1.accept(this);
      espacios++;
      n.f2.accept(this);
      espacios--;
      n.f3.accept(this);
      n.f4.accept(this);
      espacios++;
      n.f5.accept(this);
      espacios--;
      n.f6.accept(this);
      espacios++;
      n.f7.accept(this);
      espacios--;
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> ( Op_Not() )?
    * f1 -> Exp()
    * f2 -> ( ( ( Op_Not() | Op_OrAnd() ) Exp() )+ )?
    */
   //Checar
   public void visit(Comparison n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Comparison");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria() +"Comparison ->");
      espacios++;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      espacios--;
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> "!"
    */
   public void visit(Op_Not n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Op_Not");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria() + "Op_Not ->" + n.f0.toString());
      n.f0.accept(this);
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> "|"
    *       | "&&"
    */
   public void visit(Op_OrAnd n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Op_OrAnd");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria() +"Op_OrAnd ->" + n.f0.choice.toString());
      n.f0.accept(this);
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> Tipo()
    * f1 -> <VAR>
    */
   public void visit(Declaracion n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Declaracion");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
            System.out.println(sangria() + "Declaracion ->" + n.f1.toString());
       espacios++;
      n.f0.accept(this);
      espacios--;
      n.f1.accept(this);
      primero.remove(primero.size() - 1);
      
   }

   /**
    * f0 -> "int"
    *       | "String"
    *       | "float"
    */
   public void visit(Tipo n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Tipo");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria() + "Tipo ->" + n.f0.choice.toString());
      n.f0.accept(this);
      primero.remove(primero.size() - 1);
      
   }

   /**
    * f0 -> "enter"
    * f1 -> "("
    * f2 -> <VAR>
    * f3 -> ")"
    */
   public void visit(Sent_read n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Enter");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria() + "Enter ->" + n.f2.toString());
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> "print"
    * f1 -> "("
    * f2 -> ( Exp() | <CADENA> )
    * f3 -> ")"
    */
   public void visit(Sent_write n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Print");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
      n.f0.accept(this);
      n.f1.accept(this);
      switch (n.f2.which) {
          case 0: {
              System.out.println(sangria() + "Print->");
              espacios++;
              n.f2.accept(this);
              espacios--;
              break;
            }
              case 1:{
                  System.out.println(sangria() + "Print->" +n.f2.choice.toString());
                  n.f2.accept(this);
                  break;
              }
              
      }
      n.f3.accept(this);
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> <VAR>
    * f1 -> "="
    * f2 -> ( Exp() | <CADENA> )
    */
   public void visit(Asignacion n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Asignacion");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
      n.f0.accept(this);
      n.f1.accept(this);
      switch(n.f2.which){
          case 0:
             System.out.println(sangria() + "Asignacion->" + n.f0.toString());
             espacios++;
             n.f2.accept(this);
             espacios--;
             break;
          case 1:        
             System.out.println(sangria() + "Asignacion->" + n.f2.choice.toString());
             n.f2.accept(this);
             break;
              
      }
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> Exp_simple()
    * f1 -> ( Op_comp() Exp_simple() )?
    */
   public void visit(Exp n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Exp");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria() + "Exp->");
       espacios++;
      n.f0.accept(this);
      n.f1.accept(this);
      espacios--;
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> "=="
    *       | "<"
    *       | ">"
    *       | "<="
    *       | ">="
    *       | "!="
    */
   public void visit(Op_comp n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Op_comp");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria() + "Op_comp->"+ n.f0.choice.toString());
      n.f0.accept(this);
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> Term()
    * f1 -> ( ( Op_suma() | Op_resta() ) Term() )*
    */
   public void visit(Exp_simple n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Exp-simple");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria() + "Exp_simple->");
       espacios++;
      n.f0.accept(this);
      n.f1.accept(this);
      espacios--;
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> "+"
    */
   public void visit(Op_suma n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Op_suma");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria() + "Op_suma->"+ n.f0.toString());
      n.f0.accept(this);
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> "-"
    */
   public void visit(Op_resta n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Op_resta");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria() + "Op_resta->"+ n.f0.toString());
      n.f0.accept(this);
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> Factor()
    * f1 -> ( Op_mult() Factor() )*
    */
   public void visit(Term n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Term");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria() + "Term->");
       espacios++;
      n.f0.accept(this);
      n.f1.accept(this);
      espacios--;
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> "*"
    *       | "/"
    *       | "%"
    */
   public void visit(Op_mult n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Op_mult");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria() + "Op_mult->" + n.f0.choice.toString());
      n.f0.accept(this);
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> Factor2()
    * f1 -> ( Op_mod() Factor2() )*
    */
   public void visit(Factor n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Factor");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria() + "Factor->");
       espacios++;
      n.f0.accept(this);
      n.f1.accept(this);
      espacios--;
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> "**"
    *       | "%%"
    */
   public void visit(Op_mod n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Op_mod");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       System.out.println(sangria() + "Op_mod->" + n.f0.choice.toString());
      n.f0.accept(this);
      primero.remove(primero.size() - 1);
   }

   /**
    * f0 -> "(" Exp() ")"
    *       | <INTEGER>
    *       | <FLOAT>
    *       | <VAR>
    */
   public void visit(Factor2 n) {
       DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Factor2");
       modelo.insertNodeInto(nodo, primero.get(primero.size() - 1), primero.get(primero.size() - 1).getChildCount());
            primero.add(nodo);
       switch(n.f0.which){
               case 0:
                   System.out.println(sangria() + "Factor2->");
                   espacios++;
                   n.f0.accept(this);
                   espacios--;
                   break;
               case 1:
               case 2:
               case 3:
                   n.f0.accept(this);
                   System.out.println(sangria() + "Factor2 ->" + n.f0.choice.toString());
                   break;
       }
       primero.remove(primero.size() - 1);
      
   }

}
