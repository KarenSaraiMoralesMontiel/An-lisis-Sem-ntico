//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * f0 -> "for"
 * f1 -> "("
 * f2 -> <VAR>
 * f3 -> ")"
 * f4 -> "in"
 * f5 -> "range"
 * f6 -> "("
 * f7 -> ( <INTEGER> | <VAR> )
 * f8 -> ")"
 * f9 -> "{"
 * f10 -> SentenciaMuchas()
 * f11 -> "}"
 */
public class For implements Node {
   public NodeToken f0;
   public NodeToken f1;
   public NodeToken f2;
   public NodeToken f3;
   public NodeToken f4;
   public NodeToken f5;
   public NodeToken f6;
   public NodeChoice f7;
   public NodeToken f8;
   public NodeToken f9;
   public SentenciaMuchas f10;
   public NodeToken f11;

   public For(NodeToken n0, NodeToken n1, NodeToken n2, NodeToken n3, NodeToken n4, NodeToken n5, NodeToken n6, NodeChoice n7, NodeToken n8, NodeToken n9, SentenciaMuchas n10, NodeToken n11) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
      f9 = n9;
      f10 = n10;
      f11 = n11;
   }

   public For(NodeToken n0, NodeChoice n1, SentenciaMuchas n2) {
      f0 = new NodeToken("for");
      f1 = new NodeToken("(");
      f2 = n0;
      f3 = new NodeToken(")");
      f4 = new NodeToken("in");
      f5 = new NodeToken("range");
      f6 = new NodeToken("(");
      f7 = n1;
      f8 = new NodeToken(")");
      f9 = new NodeToken("{");
      f10 = n2;
      f11 = new NodeToken("}");
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

